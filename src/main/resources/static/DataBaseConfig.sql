CREATE DATABASE Pet;


create table clients
(
    iClientid integer generated by default as identity,
    cFio      varchar(100) not null,
    dBDay     date         not null,
    PRIMARY KEY (iClientid)
);

CREATE INDEX clients_fio_idx ON clients (cFio);


create table accounts
(
    iAccId     integer generated by default as identity,
    iClientId  integer     not null,
    cAccNumber varchar(20) not null,
    ccur       varchar(20) not null,
    dOpen      date        not null,
    dClose     date,
    PRIMARY KEY (iAccId)
);

CREATE INDEX accounts_ClientId_idx ON accounts (cAccNumber);
CREATE INDEX accounts_AccNumber_idx ON accounts (cAccNumber);

ALTER TABLE IF EXISTS public.accounts
    ADD CONSTRAINT fk_accounts_clients FOREIGN KEY (iclientid)
        REFERENCES public.clients (iclientid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE CASCADE;

create table ledger
(
    iLedId  integer generated by default as identity,
    iAccId  integer not null,
    iDebit  real,
    iCredit real,
    dDate   timestamp,

    PRIMARY KEY (iLedId),
    CONSTRAINT fk_ledger_accounts
        FOREIGN KEY (iAccId)
            REFERENCES accounts (iAccId)

);

CREATE INDEX ledger_search_idx ON ledger (iAccId, dDate);

create table audit_table
(
    iAudId    integer generated by default as identity,
    iIdEntity integer      not null,
    cEntity   varchar(100) not null,
    cAction   varchar(100) not null,
    cNewValue varchar(4000),
    dDate     timestamp    not null,
    PRIMARY KEY (iAudId)
);

CREATE INDEX audit_search_idx ON audit_table (cEntity, dDate, iIdEntity);


CREATE OR REPLACE FUNCTION acc_dclose_change()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
AS
$$
DECLARE
    l_ost integer;
BEGIN
    IF NEW.dClose is not null THEN
        select sum(iCredit) - sum(iDebit) into l_ost from ledger where iAccId = OLD.iAccId;
        if coalesce(l_ost, 0) > 0 then
            RAISE EXCEPTION 'Остаток на счете % больше нуля', OLD.cAccNumber
                USING HINT = 'Обнулите счет перед закрытием';
        end if;
    END IF;

    RETURN NEW;
END;
$$;

CREATE TRIGGER acc_dclose_change
    BEFORE UPDATE
    ON accounts
    FOR EACH ROW
EXECUTE PROCEDURE acc_dclose_change();
